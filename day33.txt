<참고>
git 공식 문서 : https://git-scm.com/


<수업 내용>
상향식 : git -> github : init -> add -> commmi -m -> remote ->push
하향식 : github -> git : clone -> pull

- 상향식 -
홈 폴더에서 bash 창 보기
mkdir 폴더 만들기
그 폴더 우클릭 code로 열기
code 터미널 창 안에서 touch a.txt 파일 만들기
그 파일 안에 내용 작성하고 저장하기
터미널 창 안에 git status 치기
홈 폴더가 아닌지 확인하고 관리 시작하기 위해 git init 치기
ls -a 옵션으로 .git 폴더 있는지 확인하기
git status 치기 : untracked files와 빨간색 글씨 확인하기
git add . 치기 : 무대로 올리기
git status 치기 : new file와 초록색 글씨 확인하기
git rm --cached <file> : 파일을 무대에서 내리기
git status 치기 : 잘 내려갔는지 확인하기
다시 무대로 올리기
git commit -m '메시지' : 버전 찰칵!
git status 치기
git log --oneline : 커밋 로그 확인
a.txt에 새로운 내용 추가 : M(modify)이 나온다.
git add . 치기
git restore --staged a.txt : 무대에서 내리기 (한번 커밋된 파일이므로 명령어가 달라졌다)
git add . 치기
git commit -m 'message'
git log --oneline
git diff 해쉬값 해쉬값 : 파일 내용 확인하기
kill terminal 또는 :wq 치기 또는 q 입력하기
github에 가서 방 파고 주소 확인
git remote add origin 주소 : 주소 연결
git remote -v : 주소 확인
git push origin master : 커밋 사항 올리기

- 하향식 -
홈폴더 우클릭 bash 창 열기
git clone 주소 : 그 공간에 폴더 복제
git pull origin master : 내려받기
폴더 우클릭 code로 열기
파일 내용 수정하고 저장
git add . 치기
git commit -m 'message' 치기
git push origin master 치기
다른 vscode 터미널 창에서 git pull origin master 치기 : 수정된 내용이 반영되었는지 확인

- 충돌 (깃과 깃허브 사이의) -
깃허브 안에서 수정 절대 금지 -> 충돌 발생함
충돌 발생하면
내용 수정하고 저장
git add .
git commit -m 'meesage' : (master/Merging) -> (master)

- 브렌치 -
브렌치 존재 이유 : 적당히 시험하기 위해
git branch water : water 생성
git branch : water가 있는지 확인
git switch water : water로 이동
내용 수정
git switch master : master로 이동
git merge water : water의 내용과 합치기
git branch -d water : water 삭제하기
git branch -D water : 병합하지 않은 water 삭제하기

온라인과 로컬에서 어느 곳이 더 중요한가?
-> 온라인 : 누구나 봐야 하니까

- commit message 내용 잘못 적을 때 -
git commit --amend
i 누르고 끼워넣기 확인하기
내용 수정하기
esc 누르기
:wq 입력하기
git log --oneline : 잘 수정되었는지 확인

- 브렌치 충돌 -
master에서 수정 저장 add commit
test에서 수정 저장 add commit 
master에서 git merge test : 충돌 발생
git log --oneline --graph : 전체 그림 확인

항상
수정 -> 저장 -> add -> commit -m